{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNpMgaORCvrtdSShOJP5Jmw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Importing all the libraies and functions"],"metadata":{"id":"DxH07XX8Gbzg"}},{"cell_type":"code","execution_count":65,"metadata":{"id":"fHwe3Wq_aAJI","executionInfo":{"status":"ok","timestamp":1700389350600,"user_tz":-330,"elapsed":441,"user":{"displayName":"bhavesh gupta","userId":"08765104653190611020"}}},"outputs":[],"source":["import warnings\n","warnings.filterwarnings('ignore')\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import normalize, StandardScaler\n","from sklearn.utils.class_weight import compute_sample_weight\n","from sklearn.metrics import roc_auc_score\n","import snapml\n","from snapml import DecisionTreeClassifier\n","import time\n","import gc, sys"]},{"cell_type":"markdown","source":["Viewing of the dataset characteristics"],"metadata":{"id":"R2JDWG-dk4AG"}},{"cell_type":"code","source":["raw_data = pd.read_csv('creditcard.csv')\n","print(\"There are \" + str(len(raw_data)) + \" observations in the credit card fraud dataset.\")\n","print(\"There are \" + str(len(raw_data.columns)) + \" features in the dataset.\")\n","# displaying the first 5 rows of the dataset\n","raw_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"id":"WPYkJUXRjreY","executionInfo":{"status":"ok","timestamp":1700380822053,"user_tz":-330,"elapsed":2198,"user":{"displayName":"bhavesh gupta","userId":"08765104653190611020"}},"outputId":"9fa83ea5-1528-4890-f6a6-7359109bc1e3"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 284807 observations in the credit card fraud dataset.\n","There are 31 variables in the dataset.\n"]},{"output_type":"execute_result","data":{"text/plain":["   Time        V1        V2        V3        V4        V5        V6        V7  \\\n","0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n","1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n","2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n","3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n","4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n","\n","         V8        V9  ...       V21       V22       V23       V24       V25  \\\n","0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n","1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n","2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n","3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n","4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n","\n","        V26       V27       V28  Amount  Class  \n","0 -0.189115  0.133558 -0.021053  149.62      0  \n","1  0.125895 -0.008983  0.014724    2.69      0  \n","2 -0.139097 -0.055353 -0.059752  378.66      0  \n","3 -0.221929  0.062723  0.061458  123.50      0  \n","4  0.502292  0.219422  0.215153   69.99      0  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-562122a3-9910-4988-a69a-54d972882fee\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Time</th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>V6</th>\n","      <th>V7</th>\n","      <th>V8</th>\n","      <th>V9</th>\n","      <th>...</th>\n","      <th>V21</th>\n","      <th>V22</th>\n","      <th>V23</th>\n","      <th>V24</th>\n","      <th>V25</th>\n","      <th>V26</th>\n","      <th>V27</th>\n","      <th>V28</th>\n","      <th>Amount</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>-1.359807</td>\n","      <td>-0.072781</td>\n","      <td>2.536347</td>\n","      <td>1.378155</td>\n","      <td>-0.338321</td>\n","      <td>0.462388</td>\n","      <td>0.239599</td>\n","      <td>0.098698</td>\n","      <td>0.363787</td>\n","      <td>...</td>\n","      <td>-0.018307</td>\n","      <td>0.277838</td>\n","      <td>-0.110474</td>\n","      <td>0.066928</td>\n","      <td>0.128539</td>\n","      <td>-0.189115</td>\n","      <td>0.133558</td>\n","      <td>-0.021053</td>\n","      <td>149.62</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>1.191857</td>\n","      <td>0.266151</td>\n","      <td>0.166480</td>\n","      <td>0.448154</td>\n","      <td>0.060018</td>\n","      <td>-0.082361</td>\n","      <td>-0.078803</td>\n","      <td>0.085102</td>\n","      <td>-0.255425</td>\n","      <td>...</td>\n","      <td>-0.225775</td>\n","      <td>-0.638672</td>\n","      <td>0.101288</td>\n","      <td>-0.339846</td>\n","      <td>0.167170</td>\n","      <td>0.125895</td>\n","      <td>-0.008983</td>\n","      <td>0.014724</td>\n","      <td>2.69</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>-1.358354</td>\n","      <td>-1.340163</td>\n","      <td>1.773209</td>\n","      <td>0.379780</td>\n","      <td>-0.503198</td>\n","      <td>1.800499</td>\n","      <td>0.791461</td>\n","      <td>0.247676</td>\n","      <td>-1.514654</td>\n","      <td>...</td>\n","      <td>0.247998</td>\n","      <td>0.771679</td>\n","      <td>0.909412</td>\n","      <td>-0.689281</td>\n","      <td>-0.327642</td>\n","      <td>-0.139097</td>\n","      <td>-0.055353</td>\n","      <td>-0.059752</td>\n","      <td>378.66</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>-0.966272</td>\n","      <td>-0.185226</td>\n","      <td>1.792993</td>\n","      <td>-0.863291</td>\n","      <td>-0.010309</td>\n","      <td>1.247203</td>\n","      <td>0.237609</td>\n","      <td>0.377436</td>\n","      <td>-1.387024</td>\n","      <td>...</td>\n","      <td>-0.108300</td>\n","      <td>0.005274</td>\n","      <td>-0.190321</td>\n","      <td>-1.175575</td>\n","      <td>0.647376</td>\n","      <td>-0.221929</td>\n","      <td>0.062723</td>\n","      <td>0.061458</td>\n","      <td>123.50</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.0</td>\n","      <td>-1.158233</td>\n","      <td>0.877737</td>\n","      <td>1.548718</td>\n","      <td>0.403034</td>\n","      <td>-0.407193</td>\n","      <td>0.095921</td>\n","      <td>0.592941</td>\n","      <td>-0.270533</td>\n","      <td>0.817739</td>\n","      <td>...</td>\n","      <td>-0.009431</td>\n","      <td>0.798278</td>\n","      <td>-0.137458</td>\n","      <td>0.141267</td>\n","      <td>-0.206010</td>\n","      <td>0.502292</td>\n","      <td>0.219422</td>\n","      <td>0.215153</td>\n","      <td>69.99</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-562122a3-9910-4988-a69a-54d972882fee')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-562122a3-9910-4988-a69a-54d972882fee button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-562122a3-9910-4988-a69a-54d972882fee');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-233f7818-cbee-4b51-bb93-e93ba8e59f92\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-233f7818-cbee-4b51-bb93-e93ba8e59f92')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-233f7818-cbee-4b51-bb93-e93ba8e59f92 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["Data Visualisation"],"metadata":{"id":"XZj9BS20snPi"}},{"cell_type":"code","source":["# getting the set of distinct classes\n","labels = raw_data.Class.unique()\n","# getting the count of each class\n","sizes = raw_data.Class.value_counts().values\n","# plot the class value counts\n","fig, ax = plt.subplots()\n","colors=['green','red']\n","explode = [0,0.5]\n","ax.pie(sizes, labels=labels, autopct='%1.3f%%',colors=colors,explode=explode,shadow=True)\n","ax.set_title('Genuine Vs Fraudulent Transaction Count')\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"M6L-XihnmFix","executionInfo":{"status":"ok","timestamp":1700382848765,"user_tz":-330,"elapsed":3554,"user":{"displayName":"bhavesh gupta","userId":"08765104653190611020"}},"outputId":"231971a7-459d-41fa-da48-5e08624fc5ea"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Dataset Preprocessing\n","Data preprocessing such as scaling/normalization is typically useful for linear models to accelerate the training convergence. We standardize features by removing the mean and scaling to unit variance."],"metadata":{"id":"QNSFC_I2t8IF"}},{"cell_type":"code","source":["raw_data.iloc[:, 1:30] = StandardScaler().fit_transform(raw_data.iloc[:, 1:30])\n","data_matrix = raw_data.values\n","\n","# X: feature matrix (for this analysis, we exclude the Time variable from the dataset)\n","X = data_matrix[:, 1:30]\n","\n","# y: labels vector\n","y = data_matrix[:, 30]\n","\n","# data normalization\n","X = normalize(X, norm=\"l1\")\n","\n","# print the shape of the features matrix and the labels vector\n","print('X.shape=', X.shape, 'y.shape=', y.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"reNAaK_1t7wd","executionInfo":{"status":"ok","timestamp":1700382962892,"user_tz":-330,"elapsed":3987,"user":{"displayName":"bhavesh gupta","userId":"08765104653190611020"}},"outputId":"b2671f38-2732-4595-89f5-986c94f3371a"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["X.shape= (284807, 29) y.shape= (284807,)\n"]}]},{"cell_type":"markdown","source":["Freeing up space"],"metadata":{"id":"XqCG06zJ0Asx"}},{"cell_type":"code","source":["del raw_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qhz1JL870HEw","executionInfo":{"status":"ok","timestamp":1700384534583,"user_tz":-330,"elapsed":446,"user":{"displayName":"bhavesh gupta","userId":"08765104653190611020"}},"outputId":"4f4ab9f4-05c2-4c68-91bb-8f4b6ee10faf"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":31}]},{"cell_type":"markdown","source":["Splitting the Dataset"],"metadata":{"id":"albanDzX0wB-"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\n","print('X_train.shape=', X_train.shape, 'Y_train.shape=', y_train.shape)\n","print('X_test.shape=', X_test.shape, 'Y_test.shape=', y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KOyOjTnR05UY","executionInfo":{"status":"ok","timestamp":1700384896735,"user_tz":-330,"elapsed":439,"user":{"displayName":"bhavesh gupta","userId":"08765104653190611020"}},"outputId":"ccc64f80-c8fe-4100-e847-e6ebf10e6462"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train.shape= (199364, 29) Y_train.shape= (199364,)\n","X_test.shape= (85443, 29) Y_test.shape= (85443,)\n"]}]},{"cell_type":"markdown","source":["Balancing and implementing decision trees\n","Since dataset has very few values for fraudulent transaction therefore balancing is required fir sufficient training"],"metadata":{"id":"sxNAhM-n1qxT"}},{"cell_type":"code","source":["w_train = compute_sample_weight('balanced', y_train)\n","snapml_dt = DecisionTreeClassifier(max_depth=4, random_state=45, use_gpu=True)\n","snapml_dt = DecisionTreeClassifier(max_depth=4, random_state=45, n_jobs=4)"],"metadata":{"id":"aMDDspWU2oVy","executionInfo":{"status":"ok","timestamp":1700386782321,"user_tz":-330,"elapsed":508,"user":{"displayName":"bhavesh gupta","userId":"08765104653190611020"}}},"execution_count":47,"outputs":[]},{"cell_type":"markdown","source":["Training the dataset"],"metadata":{"id":"wOMtrVy45c8b"}},{"cell_type":"code","source":["t0 = time.time()\n","snapml_dt.fit(X_train, y_train, sample_weight=w_train)\n","snapml_time = time.time()-t0\n","print(\"[Snap ML] Training time (s):  {0:.5f}\".format(snapml_time))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lZEYWqYA5gOQ","executionInfo":{"status":"ok","timestamp":1700386789242,"user_tz":-330,"elapsed":1159,"user":{"displayName":"bhavesh gupta","userId":"08765104653190611020"}},"outputId":"276b2656-5301-4c17-b2b6-65422a5491dd"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["[Snap ML] Training time (s):  0.54572\n"]}]},{"cell_type":"markdown","source":["Evaluation of the Compute Area Under the Receiver Operating Characteristic Curve, the **ROC-AUC score** of the prediction"],"metadata":{"id":"EvJ7M7vj6Al_"}},{"cell_type":"code","source":["pred = snapml_dt.predict_proba(X_test)[:,1]\n","snapml_roc_auc = roc_auc_score(y_test,pred)\n","print('[Snap ML] ROC-AUC score : {0:.3f}'.format(snapml_roc_auc))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0_pbRT3K6C7r","executionInfo":{"status":"ok","timestamp":1700389298050,"user_tz":-330,"elapsed":446,"user":{"displayName":"bhavesh gupta","userId":"08765104653190611020"}},"outputId":"8a1fbe2c-cdb2-4bee-82fa-63fb90a814b5"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["[Snap ML] ROC-AUC score : 0.904\n"]}]}]}